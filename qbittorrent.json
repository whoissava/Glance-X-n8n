{
  "name": "torrent",
  "nodes": [
    {
      "parameters": {
        "path": "get-torrents",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1200,
        100
      ],
      "id": "b88683ae-4cc0-4b80-a9c2-2197b8357d3b",
      "webhookId": "852b284c-ff19-4db7-9c21-a9ef166e6268"
    },
    {
      "parameters": {},
      "name": "When clicking 'Execute Workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1200,
        300
      ],
      "id": "3073ae3e-48f0-4e7f-9b8c-8a252c37e907"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://YOUR-IP:8080/api/v2/auth/login",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Referer",
              "value": "http://YOUR-IP:8080"
            },
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "username",
              "value": "admin"
            },
            {
              "name": "password",
              "value": "adminadmin"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "name": "qBittorrent Login",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1000,
        100
      ],
      "id": "031efa56-4d0e-435a-9245-035e22678b93"
    },
    {
      "parameters": {
        "functionCode": "// Extract SID from cookies and trim whitespace\nconst response = $input.item.json;\nconst cookies = response.headers['set-cookie'];\nif (!cookies) throw new Error('No cookies found');\nlet sid = '';\nfor (const c of cookies) {\n  const m = c.match(/SID=([^;]+)/);\n  if (m) { sid = m[1].trim(); break; }\n}\nif (!sid) throw new Error('SID not extracted');\nreturn { json: { sid } };"
      },
      "name": "Extract SID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -800,
        100
      ],
      "id": "4d45c99f-76c8-4161-b6f4-092a66ae2315"
    },
    {
      "parameters": {
        "url": "http://YOUR-ip:8080/api/v2/torrents/info",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Referer\": \"http://YOUR-IP:8080\",\n  \"Cookie\": \"{{ 'SID=' + $node['Extract SID'].json['sid'] }}\"\n}\n",
        "options": {}
      },
      "name": "Get Torrents",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -600,
        100
      ],
      "id": "6004a10c-5d48-4c99-a754-879ae1d3b7bb"
    },
    {
      "parameters": {
        "functionCode": "// raccogli tutto l'input\nconst inputs = $input.all();\n\n// caso A: il primo item.json è già un array di torrent\nif (Array.isArray(inputs[0].json)) {\n  var torrents = inputs[0].json;\n}\n// caso B: ogni item.json è un singolo torrent (split‑into‑items)\nelse if (inputs.every(i => i.json && i.json.name && i.json.state)) {\n  var torrents = inputs.map(i => i.json);\n}\n// caso C: il primo item.json contiene un campo 'torrents' o 'data'\nelse if (Array.isArray(inputs[0].json.torrents)) {\n  var torrents = inputs[0].json.torrents;\n} else if (Array.isArray(inputs[0].json.data)) {\n  var torrents = inputs[0].json.data;\n} else {\n  console.log(\"Unrecognized shape:\", JSON.stringify(inputs, null, 2));\n  var torrents = [];\n}\n\n// ora la logica di raggruppamento\nconst statusGroups = { \n  downloading: [], \n  completed: [], \n  paused: [], \n  seeding: [],\n  stopped: [],\n  errored: [], \n  others: [] \n};\n\nlet dl=0, ul=0;\nfor (const t of torrents) {\n  dl += t.dlspeed||0; ul += t.upspeed||0;\n  \n  if (t.state === 'downloading') {\n    statusGroups.downloading.push(t);\n  }\n  else if (t.state === 'stalledUP' || t.state === 'uploading') {\n    statusGroups.seeding.push(t);\n  }\n  else if (t.state === 'stalledDL' || t.state === 'metaDL') {\n    statusGroups.stopped.push(t);\n  }\n  else if (['pausedDL','pausedUP'].includes(t.state)) {\n    statusGroups.paused.push(t);\n  }\n  else if (['error','missingFiles'].includes(t.state)) {\n    statusGroups.errored.push(t);\n  }\n  else if (t.progress === 1 && t.state !== 'uploading' && t.state !== 'stalledUP') {\n    statusGroups.completed.push(t);\n  }\n  else {\n    statusGroups.others.push(t);\n  }\n}\n\nfunction fmt(b){ if(b<1024)return b+' B/s'; if(b<1024*1024)return (b/1024).toFixed(2)+' KB/s'; return (b/(1024*1024)).toFixed(2)+' MB/s'; }\nfunction pf(p){return (p*100).toFixed(2)+'%';}\nfunction secToStr(s){ if(s<0||s===8640000)return 'Unknown'; let d=Math.floor(s/86400);s%=86400;let h=Math.floor(s/3600);s%=3600;let m=Math.floor(s/60);s%=60;let r=''; if(d)r+=d+'d '; if(h||d)r+=h+'h '; if(m||h||d)r+=m+'m '; return r+s+'s'; }\n\n// Ordina i torrent in base a added_on (dal più recente al meno recente)\nstatusGroups.downloading.sort((a, b) => (b.added_on || 0) - (a.added_on || 0));\nstatusGroups.seeding.sort((a, b) => (b.added_on || 0) - (a.added_on || 0));\nstatusGroups.completed.sort((a, b) => (b.added_on || 0) - (a.added_on || 0));\nstatusGroups.stopped.sort((a, b) => (b.added_on || 0) - (a.added_on || 0));\nstatusGroups.errored.sort((a, b) => (b.added_on || 0) - (a.added_on || 0));\n\n// Limita a 10 elementi per categoria\nconst downloadingDetails = statusGroups.downloading.slice(0, 10).map(t=>({\n  name: t.name,\n  progress: pf(t.progress),\n  size: t.size,\n  downloadSpeed: fmt(t.dlspeed),\n  eta: secToStr(t.eta),\n  state: t.state,\n  added_on: new Date(t.added_on * 1000).toISOString()\n}));\n\nconst seedingDetails = statusGroups.seeding.slice(0, 10).map(t=>({\n  name: t.name,\n  size: t.size,\n  uploadSpeed: fmt(t.upspeed),\n  ratio: t.ratio.toFixed(2),\n  state: t.state,\n  added_on: new Date(t.added_on * 1000).toISOString()\n}));\n\nconst completedDetails = statusGroups.completed.slice(0, 10).map(t=>({\n  name: t.name,\n  size: t.size,\n  ratio: t.ratio.toFixed(2),\n  state: t.state,\n  added_on: new Date(t.added_on * 1000).toISOString()\n}));\n\nconst stoppedDetails = statusGroups.stopped.slice(0, 10).map(t=>({\n  name: t.name,\n  progress: pf(t.progress),\n  size: t.size,\n  state: t.state,\n  added_on: new Date(t.added_on * 1000).toISOString()\n}));\n\nconst erroredDetails = statusGroups.errored.slice(0, 10).map(t=>({\n  name: t.name,\n  progress: pf(t.progress),\n  size: t.size,\n  state: t.state,\n  added_on: new Date(t.added_on * 1000).toISOString()\n}));\n\nreturn {\n  summary: {\n    total: torrents.length,\n    downloading: statusGroups.downloading.length,\n    seeding: statusGroups.seeding.length,\n    stopped: statusGroups.stopped.length,\n    completed: statusGroups.completed.length,\n    paused: statusGroups.paused.length,\n    errored: statusGroups.errored.length,\n    others: statusGroups.others.length,\n    totalDownloadSpeed: fmt(dl),\n    totalUploadSpeed: fmt(ul),\n  },\n  downloading: downloadingDetails,\n  seeding: seedingDetails,\n  completed: completedDetails,\n  stopped: stoppedDetails,\n  errored: erroredDetails,\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Process Torrents",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -400,
        120
      ],
      "id": "b4b1b951-1dd1-463f-befd-3570ead28017"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$node[\"Process Torrents\"].json}}",
        "options": {}
      },
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "47462c30-32fd-4890-a516-6f7fe047d461"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "qBittorrent Login",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking 'Execute Workflow'": {
      "main": [
        [
          {
            "node": "qBittorrent Login",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "qBittorrent Login": {
      "main": [
        [
          {
            "node": "Extract SID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract SID": {
      "main": [
        [
          {
            "node": "Get Torrents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Torrents": {
      "main": [
        [
          {
            "node": "Process Torrents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Torrents": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "55554f66-6e7f-42e8-97a3-a4784829141c",
  "meta": {
    "instanceId": "353d63965fb91315aee01d430a5a4b0ffda233e14b2e5efa4f65f95eef93d0e5"
  },
  "id": "xmTRKDiNf26KKtMc",
  "tags": []
}